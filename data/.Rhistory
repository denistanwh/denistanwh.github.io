ggtitle("Time Series Plot of Ozone Concentration (PPM)") +
theme_classic()
plot(p)
StartDay = 0
EndDay = 160
# StartDay is days from May 1st, with May 1st being day 1
# EndDay is days from May 1st, with September 30 being dat 153 (last)
# Check / Defaults
if (StartDay <= 0 | StartDay > 153) {
StartDay = 1
}
if (EndDay <= 0 | EndDay > 153) {
EndDay = 153
}
# Require libraries
require(ggplot2)
# Load data, data has air quality and environmental data from May to September of unknown year
dataset <- airquality
# Keep only columns of use
dataset <- subset(dataset, select=c(Ozone, Day))
# Keep only data within the bounds specified by user
dataset <- dataset[]
# Check how many data points there are pre-processing
count_before <- dim(dataset)[1]
# Keep only data rows without missing values
dataset <- dataset[complete.cases(dataset)==TRUE,]
# Check how many data points there are post-processing
count_after <- dim(dataset)[1]
# Number of ommitted data points
count_rm <- count_before - count_after
# Plot
p <- ggplot(dataset) +
geom_line(aes(x=Day, y=Ozone)) +
ggtitle("Time Series Plot of Ozone Concentration (PPM)") +
theme_classic()
StartDay
myfun(1,153)
myfun <- function(StartDay, EndDay) {
# Plot time series of air quality from air quality data set from Maps library through function call
myfun <- function(StartDay, EndDay) {
# StartDay is days from May 1st, with May 1st being day 1
# EndDay is days from May 1st, with September 30 being dat 153 (last)
# Check / Defaults
if (StartDay <= 0 | StartDay > 153) {
StartDay = 1
}
if (EndDay <= 0 | EndDay > 153) {
EndDay = 153
}
# Require libraries
require(ggplot2)
# Load data, data has air quality and environmental data from May to September of unknown year
dataset <- airquality
# Keep only columns of use
dataset <- subset(dataset, select=c(Ozone, Day))
# Keep only data within the bounds specified by user
dataset <- dataset[]
# Check how many data points there are pre-processing
count_before <- dim(dataset)[1]
# Keep only data rows without missing values
dataset <- dataset[complete.cases(dataset)==TRUE,]
# Check how many data points there are post-processing
count_after <- dim(dataset)[1]
# Number of ommitted data points
count_rm <- count_before - count_after
# Plot
p <- ggplot(dataset) +
geom_line(aes(x=Day, y=Ozone)) +
ggtitle("Time Series Plot of Ozone Concentration (PPM)") +
theme_classic()
plot(p)
}
myfun(1,150)
# StartDay is days from May 1st, with May 1st being day 1
# EndDay is days from May 1st, with September 30 being dat 153 (last)
# Check / Defaults
if (StartDay <= 0 | StartDay > 153) {
StartDay = 1
}
if (EndDay <= 0 | EndDay > 153) {
EndDay = 153
}
# Require libraries
require(ggplot2)
# Load data, data has air quality and environmental data from May to September of unknown year
dataset <- airquality
# Keep only columns of use
dataset <- subset(dataset, select=c(Ozone, Day))
# Keep only data within the bounds specified by user
dataset <- dataset[]
# Check how many data points there are pre-processing
count_before <- dim(dataset)[1]
# Keep only data rows without missing values
dataset <- dataset[complete.cases(dataset)==TRUE,]
# Check how many data points there are post-processing
count_after <- dim(dataset)[1]
# Number of ommitted data points
count_rm <- count_before - count_after
# Plot
p <- ggplot(dataset) +
geom_line(aes(x=Day, y=Ozone)) +
ggtitle("Time Series Plot of Ozone Concentration (PPM)") +
theme_classic()
plot(p)
))
myfun <- function(StartDay, EndDay) {
# StartDay is days from May 1st, with May 1st being day 1
# EndDay is days from May 1st, with September 30 being dat 153 (last)
# Check / Defaults
if (StartDay <= 0 | StartDay > 153) {
StartDay = 1
}
if (EndDay <= 0 | EndDay > 153) {
EndDay = 153
}
# Require libraries
require(ggplot2)
# Load data, data has air quality and environmental data from May to September of unknown year
dataset <- airquality
# Keep only columns of use
dataset <- subset(dataset, select=c(Ozone, Day))
# Keep only data within the bounds specified by user
dataset <- dataset[]
# Check how many data points there are pre-processing
count_before <- dim(dataset)[1]
# Keep only data rows without missing values
dataset <- dataset[complete.cases(dataset)==TRUE,]
# Check how many data points there are post-processing
count_after <- dim(dataset)[1]
# Number of ommitted data points
count_rm <- count_before - count_after
# Plot
p <- ggplot(dataset) +
geom_line(aes(x=Day, y=Ozone)) +
ggtitle("Time Series Plot of Ozone Concentration (PPM)") +
theme_classic()
plot(p)
}
myfun(1,1)
x_scale_continuous
x_scale
?ggplot
p <- ggplot(dataset) +
geom_line(aes(x=Day, y=Ozone), color = 'red', size = 5) +
ggtitle("Time Series Plot of Ozone Concentration (PPM)") +
theme_classic()
plot(p)
p <- ggplot(dataset) +
geom_line(aes(x=Day, y=Ozone), color = 'red') +
ggtitle("Time Series Plot of Ozone Concentration (PPM)") +
theme_classic()
plot(p)
mean_Ozone <- mean(dataset$Ozone)
?h.line
?hline
ddply(dataset, mutate, meanOzone = mean(Ozone))
require(plyr)
ddply(dataset, mutate, meanOzone = mean(Ozone))
?ddply
ddply(dataset, .(Ozone), mutate, meanOzone = mean(Ozone))
# Quiz 3: Plot time series of air quality from airquality dataset using function call
airQualityPlotter <- function(StartDay, EndDay, col) {
# StartDay is days from May 1st, with May 1st being day 1
# EndDay is days from May 1st, with September 30 being dat 153 (last)
# col is colour of plot
# Check / Defaults
if (StartDay <= 0 | StartDay > 153) {
StartDay = 1
}
if (EndDay <= 0 | EndDay > 153) {
EndDay = 153
}
# Require libraries
require(ggplot2)
# Load data, data has air quality and environmental data from May to September of unknown year
dataset <- airquality
# Keep only columns of use
dataset <- subset(dataset, select=c(Ozone, Day))
# Keep only data within the bounds specified by user
dataset <- dataset[]
# Check how many data points there are pre-processing
count_before <- dim(dataset)[1]
# Keep only data rows without missing values
dataset <- dataset[complete.cases(dataset)==TRUE,]
# Check how many data points there are post-processing
count_after <- dim(dataset)[1]
# Number of ommitted data points
count_rm <- count_before - count_after
# Plot
p <- ggplot(dataset) +
geom_line(aes(x=Day, y=Ozone), color = col) +
geom_line
ggtitle("Time Series Plot of Ozone Concentration (in PPM)") +
theme_classic()
plot(p)
}
# Quiz 3: Plot time series of air quality from airquality dataset using function call
airPlotter <- function(StartDay, EndDay, col) {
# StartDay is days from May 1st, with May 1st being day 1
# EndDay is days from May 1st, with September 30 being dat 153 (last)
# col is colour of plot
# Check / Defaults
if (StartDay <= 0 | StartDay > 153) {
StartDay = 1
}
if (EndDay <= 0 | EndDay > 153) {
EndDay = 153
}
# Require libraries
require(ggplot2)
# Load data, data has air quality and environmental data from May to September of unknown year
dataset <- airquality
# Keep only columns of use
dataset <- subset(dataset, select=c(Ozone, Day))
# Keep only data within the bounds specified by user
dataset <- dataset[]
# Check how many data points there are pre-processing
count_before <- dim(dataset)[1]
# Keep only data rows without missing values
dataset <- dataset[complete.cases(dataset)==TRUE,]
# Check how many data points there are post-processing
count_after <- dim(dataset)[1]
# Number of ommitted data points
count_rm <- count_before - count_after
# Plot
p <- ggplot(dataset) +
geom_line(aes(x=Day, y=Ozone), color = col) +
geom_line
ggtitle("Time Series Plot of Ozone Concentration (in PPM)") +
theme_classic()
plot(p)
}
airPlotter(1,150,'blue')
# Quiz 3: Plot time series of air quality from airquality dataset using function call
airPlotter <- function(StartDay, EndDay, col) {
# StartDay is days from May 1st, with May 1st being day 1
# EndDay is days from May 1st, with September 30 being dat 153 (last)
# col is colour of plot
# Check / Defaults
if (StartDay <= 0 | StartDay > 153) {
StartDay = 1
}
if (EndDay <= 0 | EndDay > 153) {
EndDay = 153
}
# Require libraries
require(ggplot2)
# Load data, data has air quality and environmental data from May to September of unknown year
dataset <- airquality
# Keep only columns of use
dataset <- subset(dataset, select=c(Ozone, Day))
# Keep only data within the bounds specified by user
dataset <- dataset[]
# Check how many data points there are pre-processing
count_before <- dim(dataset)[1]
# Keep only data rows without missing values
dataset <- dataset[complete.cases(dataset)==TRUE,]
# Check how many data points there are post-processing
count_after <- dim(dataset)[1]
# Number of ommitted data points
count_rm <- count_before - count_after
# Plot
p <- ggplot(dataset) +
geom_line(aes(x=Day, y=Ozone), color = col) +
ggtitle("Time Series Plot of Ozone Concentration (in PPM)") +
theme_classic()
plot(p)
}
airPlotter(1,150,'blue')
airPlotter(1,150,'yellow')
airPlotter(1,150,'pink')
dataset
airPlotter(50, 60, 'blue')
# Quiz 3: Plot time series of air quality from airquality dataset using function call
airPlotter <- function(StartDay, EndDay, col) {
# StartDay is days from May 1st, with May 1st being day 1
# EndDay is days from May 1st, with September 30 being dat 153 (last)
# col is colour of plot
# Check / Defaults
if (StartDay <= 0 | StartDay > 153) {
StartDay = 1
}
if (EndDay <= 0 | EndDay > 153) {
EndDay = 153
}
# Require libraries
require(ggplot2)
# Load data, data has air quality and environmental data from May to September of unknown year
dataset <- airquality
# Keep only columns of use
dataset <- subset(dataset, select=c(Ozone, Day))
# Keep only data within the bounds specified by user
dataset <- dataset[StartDay:EndDay,]
# Check how many data points there are pre-processing
count_before <- dim(dataset)[1]
# Keep only data rows without missing values
dataset <- dataset[complete.cases(dataset)==TRUE,]
# Check how many data points there are post-processing
count_after <- dim(dataset)[1]
# Number of ommitted data points
count_rm <- count_before - count_after
# Plot
p <- ggplot(dataset) +
geom_line(aes(x=Day, y=Ozone), color = col) +
ggtitle("Time Series Plot of Ozone Concentration (in PPM)") +
theme_classic()
plot(p)
}
airPlotter(50, 60, 'blue')
airPlotter(50, 100, 'blue')
airPlotter(3, 100, 'blue')
airPlotter(100, 1, 'blue')
airPlotter(1, 100, 'blue')
airPlotter(1, 2, 'blue')
airPlotter(2, 1, 'blue')
airPlotter(1, 153, 'blue')
airPlotter(153, 1, 'blue')
airPlotter(153, 1, 'blue')
# Quiz 3: Plot time series of air quality from airquality dataset using function call
airPlotter <- function(StartDay, EndDay, col) {
# StartDay is days from May 1st, with May 1st being day 1
# EndDay is days from May 1st, with September 30 being dat 153 (last), EndDay has to be larger than StartDay
# col is colour of plot
# Check / Defaults
if (StartDay <= 0 | StartDay > 153) {
StartDay = 1
}
if (EndDay <= 0 | EndDay > 153) {
EndDay = 153
}
# Require libraries
require(ggplot2)
# Load data, data has air quality and environmental data from May to September of unknown year
dataset <- airquality
# Keep only columns of use
dataset <- subset(dataset, select=c(Ozone, Day))
# Keep only data within the bounds specified by user
dataset <- dataset[StartDay:EndDay,]
# Check how many data points there are pre-processing
count_before <- dim(dataset)[1]
# Keep only data rows without missing values
dataset <- dataset[complete.cases(dataset)==TRUE,]
# Check how many data points there are post-processing
count_after <- dim(dataset)[1]
# Number of ommitted data points
count_rm <- count_before - count_after
# Plot
p <- ggplot(dataset) +
geom_point(aes(x=Day, y=Ozone), color = col) +
ggtitle("Time Series Plot of Ozone Concentration (in PPM)") +
theme_classic()
plot(p)
}
airPlotter(153, 1, 'blue')
# Quiz 3: Plot time series of air quality from airquality dataset using function call
airPlotter <- function(StartDay, EndDay, col) {
# StartDay is days from May 1st, with May 1st being day 1
# EndDay is days from May 1st, with September 30 being dat 153 (last), EndDay has to be larger than StartDay
# col is colour of plot
# Check / Defaults
if (StartDay <= 0 | StartDay > 153) {
StartDay = 1
}
if (EndDay <= 0 | EndDay > 153) {
EndDay = 153
}
# Require libraries
require(ggplot2)
# Load data, data has air quality and environmental data from May to September of unknown year
dataset <- airquality
# Keep only columns of use
dataset <- subset(dataset, select=c(Ozone, Day))
# Keep only data within the bounds specified by user
dataset <- dataset[StartDay:EndDay,]
# Check how many data points there are pre-processing
count_before <- dim(dataset)[1]
# Keep only data rows without missing values
dataset <- dataset[complete.cases(dataset)==TRUE,]
# Check how many data points there are post-processing
count_after <- dim(dataset)[1]
# Number of ommitted data points
count_rm <- count_before - count_after
# Plot
p <- ggplot(dataset) +
geom_point(aes(x=Day, y=Ozone), color = col) +
geom_line(aes(x=Day,y=Ozone), color = 'grey')
ggtitle("Time Series Plot of Ozone Concentration (in PPM)") +
theme_classic()
plot(p)
}
airPlotter(153, 1, 'blue')
# Quiz 3: Plot time series of air quality from airquality dataset using function call
airPlotter <- function(StartDay, EndDay, col) {
# StartDay is days from May 1st, with May 1st being day 1
# EndDay is days from May 1st, with September 30 being dat 153 (last), EndDay has to be larger than StartDay
# col is colour of plot
# Check / Defaults
if (StartDay <= 0 | StartDay > 153) {
StartDay = 1
}
if (EndDay <= 0 | EndDay > 153) {
EndDay = 153
}
# Require libraries
require(ggplot2)
# Load data, data has air quality and environmental data from May to September of unknown year
dataset <- airquality
# Keep only columns of use
dataset <- subset(dataset, select=c(Ozone, Day))
# Keep only data within the bounds specified by user
dataset <- dataset[StartDay:EndDay,]
# Check how many data points there are pre-processing
count_before <- dim(dataset)[1]
# Keep only data rows without missing values
dataset <- dataset[complete.cases(dataset)==TRUE,]
# Check how many data points there are post-processing
count_after <- dim(dataset)[1]
# Number of ommitted data points
count_rm <- count_before - count_after
# Plot
p <- ggplot(dataset) +
geom_point(aes(x=Day, y=Ozone), color = col)
ggtitle("Time Series Plot of Ozone Concentration (in PPM)") +
theme_classic() +
geom_line(aes(x=Day,y=Ozone), color = 'grey')
plot(p)
)
# Quiz 3: Plot time series of air quality from airquality dataset using function call
airPlotter <- function(StartDay, EndDay, col) {
# StartDay is days from May 1st, with May 1st being day 1
# EndDay is days from May 1st, with September 30 being dat 153 (last), EndDay has to be larger than StartDay
# col is colour of plot
# Check / Defaults
if (StartDay <= 0 | StartDay > 153) {
StartDay = 1
}
if (EndDay <= 0 | EndDay > 153) {
EndDay = 153
}
# Require libraries
require(ggplot2)
# Load data, data has air quality and environmental data from May to September of unknown year
dataset <- airquality
# Keep only columns of use
dataset <- subset(dataset, select=c(Ozone, Day))
# Keep only data within the bounds specified by user
dataset <- dataset[StartDay:EndDay,]
# Check how many data points there are pre-processing
count_before <- dim(dataset)[1]
# Keep only data rows without missing values
dataset <- dataset[complete.cases(dataset)==TRUE,]
# Check how many data points there are post-processing
count_after <- dim(dataset)[1]
# Number of ommitted data points
count_rm <- count_before - count_after
# Plot
p <- ggplot(dataset) +
geom_line(aes(x=Day, y=Ozone), color = col) +
ggtitle("Time Series Plot of Ozone Concentration (in PPM)") +
theme_classic()
plot(p)
}
airPlotter(153, 1, 'blue')
# Quiz 3: Plot time series of air quality from airquality dataset using function call
airPlotter <- function(StartDay, EndDay, col) {
# StartDay is days from May 1st, with May 1st being day 1
# EndDay is days from May 1st, with September 30 being dat 153 (last), EndDay has to be larger than StartDay
# col is colour of plot
# Check / Defaults
if (StartDay <= 0 | StartDay > 153) {
StartDay = 1
}
if (EndDay <= 0 | EndDay > 153) {
EndDay = 153
}
# Require libraries
require(ggplot2)
# Load data, data has air quality and environmental data from May to September of unknown year
dataset <- airquality
# Keep only columns of use
dataset <- subset(dataset, select=c(Ozone, Day))
# Keep only data within the bounds specified by user
dataset <- dataset[StartDay:EndDay,]
# Check how many data points there are pre-processing
count_before <- dim(dataset)[1]
# Keep only data rows without missing values
dataset <- dataset[complete.cases(dataset)==TRUE,]
# Check how many data points there are post-processing
count_after <- dim(dataset)[1]
# Number of ommitted data points
count_rm <- count_before - count_after
# Plot
p <- ggplot(dataset) +
geom_line(aes(x=Day, y=Ozone), color = col) +
ggtitle("Time Series Plot of Ozone Concentration (in PPM)") +
theme_classic()
plot(p)
}
setwd("~/Desktop/Test/data")
data <- read.csv("data_cluster1.csv")
write.csv(data, "data_cluster1.csv")
data <- read.csv("data_cluster1.csv", sep = " ")
head(data)
write.csv(data, "data_cluster1.csv")
data <- read.csv("data_cluster2.csv", sep = " ")
write.csv(data, "data_cluster2.csv")
data <- read.csv("data_cluster3.csv", sep = " ")
write.csv(data, "data_cluster3.csv")
data <- read.csv("data_cluster4.csv", sep = " ")
write.csv(data, "data_cluster4.csv")
data <- read.csv("data_cluster5.csv", sep = " ")
write.csv(data, "data_cluster5.csv")
